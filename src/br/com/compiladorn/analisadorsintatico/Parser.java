
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package br.com.compiladorn.analisadorsintatico;

import java_cup.runtime.Symbol;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\004\000\002\004\005\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\005\011\000\002\006\011\000\002\023" +
    "\015\000\002\023\011\000\002\007\004\000\002\007\003" +
    "\000\002\010\006\000\002\010\004\000\002\011\004\000" +
    "\002\011\003\000\002\012\007\000\002\012\013\000\002" +
    "\013\004\000\002\013\003\000\002\014\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\004\000\002\016\004\000\002\017" +
    "\005\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\020\005\000" +
    "\002\021\003\000\002\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\024\004\026\005\017\007\023\010\027\012" +
    "\005\017\012\020\030\021\010\031\021\001\002\000\066" +
    "\004\152\005\ufff9\006\ufff9\007\ufff9\010\ufff9\012\ufff9\013" +
    "\ufff9\014\ufff9\017\ufff9\020\ufff9\021\ufff9\024\ufff9\025\ufff9" +
    "\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034" +
    "\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9" +
    "\001\002\000\024\004\026\005\017\007\023\010\027\012" +
    "\005\017\012\020\030\021\010\031\021\001\002\000\066" +
    "\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\017\ufff5\020\ufff5\021\ufff5\024\ufff5\025\ufff5" +
    "\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034" +
    "\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5" +
    "\001\002\000\066\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\012\ufffb\013\ufffb\014\ufffb\017\ufffb\020\ufffb\021\ufffb" +
    "\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032" +
    "\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb" +
    "\041\ufffb\042\ufffb\001\002\000\004\012\142\001\002\000" +
    "\066\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\017\012\020\ufff8\021\ufff8\024\ufff8\025" +
    "\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8" +
    "\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042" +
    "\ufff8\001\002\000\024\004\026\005\017\007\023\010\027" +
    "\012\051\017\012\020\030\021\010\031\021\001\002\000" +
    "\004\002\000\001\002\000\066\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\041\uffe7\042\uffe7\001\002\000\004\002\130" +
    "\001\002\000\066\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010" +
    "\ufffa\012\ufffa\013\ufffa\014\ufffa\017\ufffa\020\ufffa\021\ufffa" +
    "\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032" +
    "\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\041\ufffa\042\ufffa\001\002\000\070\004\uffd1\005\uffd1\006" +
    "\uffd1\007\uffd1\010\uffd1\012\uffd1\013\uffd1\014\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\001\002\000" +
    "\066\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\012\ufff7" +
    "\013\ufff7\014\ufff7\017\ufff7\020\ufff7\021\ufff7\024\ufff7\025" +
    "\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7" +
    "\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042" +
    "\ufff7\001\002\000\004\012\107\001\002\000\066\004\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\010\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\001\002" +
    "\000\070\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\012" +
    "\uffd0\013\uffd0\014\uffd0\017\uffd0\020\uffd0\021\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\001\002\000\066\004\ufff6\005\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\012\ufff6\013\ufff6\014\ufff6\017\ufff6" +
    "\020\ufff6\021\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030" +
    "\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\040\ufff6\041\ufff6\042\ufff6\001\002\000\066\004" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\012\ufffc\013\ufffc" +
    "\014\ufffc\017\ufffc\020\ufffc\021\ufffc\024\ufffc\025\ufffc\026" +
    "\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc" +
    "\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\001" +
    "\002\000\012\005\017\007\023\010\027\016\105\001\002" +
    "\000\070\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\012" +
    "\uffcf\013\uffcf\014\uffcf\017\uffcf\020\uffcf\021\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\001\002\000\004\012\043\001\002\000" +
    "\016\006\040\024\034\025\036\026\035\027\032\030\033" +
    "\001\002\000\024\004\uffd6\005\uffd6\007\uffd6\010\uffd6\012" +
    "\uffd6\017\uffd6\020\uffd6\021\uffd6\031\uffd6\001\002\000\030" +
    "\002\ufffe\004\026\005\017\007\023\010\027\012\005\015" +
    "\ufffe\017\012\020\030\021\010\031\021\001\002\000\024" +
    "\004\uffd5\005\uffd5\007\uffd5\010\uffd5\012\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\031\uffd5\001\002\000\024\004\uffd7\005\uffd7" +
    "\007\uffd7\010\uffd7\012\uffd7\017\uffd7\020\uffd7\021\uffd7\031" +
    "\uffd7\001\002\000\024\004\uffd4\005\uffd4\007\uffd4\010\uffd4" +
    "\012\uffd4\017\uffd4\020\uffd4\021\uffd4\031\uffd4\001\002\000" +
    "\024\004\026\005\017\007\023\010\027\012\005\017\012" +
    "\020\030\021\010\031\021\001\002\000\024\004\uffd3\005" +
    "\uffd3\007\uffd3\010\uffd3\012\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\031\uffd3\001\002\000\066\004\uffd8\005\uffd8\006\040\007" +
    "\uffd8\010\uffd8\012\uffd8\013\uffd8\014\uffd8\017\uffd8\020\uffd8" +
    "\021\uffd8\024\034\025\036\026\035\027\032\030\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\041\uffd8\042\uffd8\001\002\000\006\002\uffff\015" +
    "\uffff\001\002\000\004\004\045\001\002\000\004\030\050" +
    "\001\002\000\010\005\017\007\023\010\027\001\002\000" +
    "\004\030\047\001\002\000\066\004\uffd2\005\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\012\uffd2\013\uffd2\014\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\001\002\000\024\004\026" +
    "\005\017\007\023\010\027\012\051\017\012\020\030\021" +
    "\010\031\021\001\002\000\024\004\026\005\017\007\023" +
    "\010\027\012\051\017\012\020\030\021\010\031\021\001" +
    "\002\000\026\030\073\032\060\033\065\034\057\035\061" +
    "\036\055\037\054\040\064\041\056\042\063\001\002\000" +
    "\036\006\040\024\034\025\036\026\035\027\032\032\060" +
    "\033\065\034\057\035\061\036\055\037\054\040\064\041" +
    "\056\042\063\001\002\000\024\004\uffdd\005\uffdd\007\uffdd" +
    "\010\uffdd\012\uffdd\017\uffdd\020\uffdd\021\uffdd\031\uffdd\001" +
    "\002\000\024\004\uffde\005\uffde\007\uffde\010\uffde\012\uffde" +
    "\017\uffde\020\uffde\021\uffde\031\uffde\001\002\000\024\004" +
    "\uffdb\005\uffdb\007\uffdb\010\uffdb\012\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\031\uffdb\001\002\000\024\004\uffe0\005\uffe0\007" +
    "\uffe0\010\uffe0\012\uffe0\017\uffe0\020\uffe0\021\uffe0\031\uffe0" +
    "\001\002\000\024\004\uffe2\005\uffe2\007\uffe2\010\uffe2\012" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\031\uffe2\001\002\000\024" +
    "\004\uffdf\005\uffdf\007\uffdf\010\uffdf\012\uffdf\017\uffdf\020" +
    "\uffdf\021\uffdf\031\uffdf\001\002\000\024\004\026\005\017" +
    "\007\023\010\027\012\005\017\012\020\030\021\010\031" +
    "\021\001\002\000\046\004\026\005\017\007\023\010\027" +
    "\012\051\017\012\020\030\021\010\031\021\032\060\033" +
    "\065\034\057\035\061\036\055\037\054\040\064\041\056" +
    "\042\063\001\002\000\024\004\uffdc\005\uffdc\007\uffdc\010" +
    "\uffdc\012\uffdc\017\uffdc\020\uffdc\021\uffdc\031\uffdc\001\002" +
    "\000\024\004\uffe1\005\uffe1\007\uffe1\010\uffe1\012\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\031\uffe1\001\002\000\024\004\uffd9" +
    "\005\uffd9\007\uffd9\010\uffd9\012\uffd9\017\uffd9\020\uffd9\021" +
    "\uffd9\031\uffd9\001\002\000\046\004\uffda\005\uffda\007\uffda" +
    "\010\uffda\012\uffda\017\uffda\020\uffda\021\uffda\031\uffda\032" +
    "\060\033\065\034\057\035\061\036\055\037\054\040\064" +
    "\041\056\042\063\001\002\000\024\004\026\005\017\007" +
    "\023\010\027\012\051\017\012\020\030\021\010\031\021" +
    "\001\002\000\054\004\uffe5\005\uffe5\007\uffe5\010\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\017\uffe5\020\uffe5\021\uffe5\030\uffe5" +
    "\031\uffe5\032\060\033\065\034\057\035\061\036\055\037" +
    "\054\040\064\041\056\042\063\001\002\000\066\004\uffe3" +
    "\005\uffe3\006\040\007\uffe3\010\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\024\034\025\036\026\035" +
    "\027\032\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\001\002" +
    "\000\024\004\026\005\017\007\023\010\027\012\005\017" +
    "\012\020\030\021\010\031\021\001\002\000\016\006\040" +
    "\013\075\024\034\025\036\026\035\027\032\001\002\000" +
    "\004\014\076\001\002\000\024\004\026\005\017\007\023" +
    "\010\027\012\005\017\012\020\030\021\010\031\021\001" +
    "\002\000\004\015\100\001\002\000\066\004\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\012\ufff2\013\ufff2\014\ufff2\017" +
    "\ufff2\020\ufff2\021\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2" +
    "\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036" +
    "\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\001\002\000\026" +
    "\013\104\032\060\033\065\034\057\035\061\036\055\037" +
    "\054\040\064\041\056\042\063\001\002\000\040\006\040" +
    "\013\103\024\034\025\036\026\035\027\032\032\060\033" +
    "\065\034\057\035\061\036\055\037\054\040\064\041\056" +
    "\042\063\001\002\000\066\004\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\012\ufffd\013\ufffd\014\ufffd\017\ufffd\020\ufffd" +
    "\021\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd" +
    "\040\ufffd\041\ufffd\042\ufffd\001\002\000\054\004\uffe4\005" +
    "\uffe4\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4" +
    "\001\002\000\024\004\026\005\017\007\023\010\027\012" +
    "\005\017\012\020\030\021\010\031\021\001\002\000\066" +
    "\004\uffe6\005\uffe6\006\040\007\uffe6\010\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\017\uffe6\020\uffe6\021\uffe6\024\034\025\036" +
    "\026\035\027\032\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6" +
    "\001\002\000\012\005\017\007\023\010\027\022\110\001" +
    "\002\000\006\013\uffef\022\uffef\001\002\000\004\013\124" +
    "\001\002\000\004\023\121\001\002\000\006\013\115\022" +
    "\114\001\002\000\006\013\ufff0\022\ufff0\001\002\000\004" +
    "\014\116\001\002\000\024\004\026\005\017\007\023\010" +
    "\027\012\005\017\012\020\030\021\010\031\021\001\002" +
    "\000\004\015\120\001\002\000\066\004\ufff4\005\ufff4\006" +
    "\ufff4\007\ufff4\010\ufff4\012\ufff4\013\ufff4\014\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030" +
    "\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4" +
    "\037\ufff4\040\ufff4\041\ufff4\042\ufff4\001\002\000\006\013" +
    "\uffed\030\122\001\002\000\010\005\017\007\023\010\027" +
    "\001\002\000\004\013\uffee\001\002\000\004\014\125\001" +
    "\002\000\024\004\026\005\017\007\023\010\027\012\005" +
    "\017\012\020\030\021\010\031\021\001\002\000\004\015" +
    "\127\001\002\000\066\004\ufff3\005\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\012\ufff3\013\ufff3\014\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3" +
    "\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040" +
    "\ufff3\041\ufff3\042\ufff3\001\002\000\004\002\001\001\002" +
    "\000\026\014\132\032\060\033\065\034\057\035\061\036" +
    "\055\037\054\040\064\041\056\042\063\001\002\000\024" +
    "\004\026\005\017\007\023\010\027\012\005\017\012\020" +
    "\030\021\010\031\021\001\002\000\004\015\134\001\002" +
    "\000\070\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011" +
    "\135\012\uffea\013\uffea\014\uffea\017\uffea\020\uffea\021\uffea" +
    "\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032" +
    "\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea" +
    "\041\uffea\042\uffea\001\002\000\004\014\136\001\002\000" +
    "\024\004\026\005\017\007\023\010\027\012\005\017\012" +
    "\020\030\021\010\031\021\001\002\000\004\015\140\001" +
    "\002\000\066\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\017\uffe9\020\uffe9\021\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9" +
    "\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041" +
    "\uffe9\042\uffe9\001\002\000\066\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\012\uffec\013\uffec\014\uffec\017\uffec\020" +
    "\uffec\021\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec" +
    "\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037" +
    "\uffec\040\uffec\041\uffec\042\uffec\001\002\000\024\004\026" +
    "\005\017\007\023\010\027\012\051\017\012\020\030\021" +
    "\010\031\021\001\002\000\026\013\144\032\060\033\065" +
    "\034\057\035\061\036\055\037\054\040\064\041\056\042" +
    "\063\001\002\000\004\014\145\001\002\000\024\004\026" +
    "\005\017\007\023\010\027\012\005\017\012\020\030\021" +
    "\010\031\021\001\002\000\004\015\147\001\002\000\066" +
    "\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\012\ufff1\013" +
    "\ufff1\014\ufff1\017\ufff1\020\ufff1\021\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034" +
    "\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1" +
    "\001\002\000\016\006\040\013\103\024\034\025\036\026" +
    "\035\027\032\001\002\000\066\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\012\uffe8\013\uffe8\014\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\001\002\000\004\016\105" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\034\002\014\003\012\004\030\005\006\006" +
    "\015\011\010\012\021\013\003\014\013\017\017\020\024" +
    "\021\005\023\023\001\001\000\004\014\150\001\001\000" +
    "\030\004\147\005\006\006\015\011\010\012\021\013\003" +
    "\014\013\017\017\020\024\021\005\023\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\140\001\001\000\032\004\052\005\006\006\015\011" +
    "\010\012\021\013\003\014\013\015\130\017\017\020\024" +
    "\021\005\023\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\036\001\001\000\002\001\001\000\032\003\041" +
    "\004\030\005\006\006\015\011\010\012\021\013\003\014" +
    "\013\017\017\020\024\021\005\023\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\040\005\006\006\015\011\010\012\021\013\003\014\013" +
    "\017\017\020\024\021\005\023\023\001\001\000\002\001" +
    "\001\000\004\022\036\001\001\000\002\001\001\000\004" +
    "\020\043\001\001\000\002\001\001\000\004\021\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\004\052" +
    "\005\006\006\015\011\010\012\021\013\003\014\013\015" +
    "\051\017\017\020\024\021\005\023\023\001\001\000\032" +
    "\004\101\005\006\006\015\011\010\012\021\013\003\014" +
    "\013\015\100\017\017\020\024\021\005\023\023\001\001" +
    "\000\004\016\067\001\001\000\006\016\061\022\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\071\005\006\006\015\011\010\012\021\013\003" +
    "\014\013\017\017\020\024\021\005\023\023\001\001\000" +
    "\034\004\052\005\006\006\015\011\010\012\021\013\003" +
    "\014\013\015\066\016\065\017\017\020\024\021\005\023" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\067\001\001\000\032\004\052\005" +
    "\006\006\015\011\010\012\021\013\003\014\013\015\070" +
    "\017\017\020\024\021\005\023\023\001\001\000\004\016" +
    "\067\001\001\000\004\022\036\001\001\000\030\004\073" +
    "\005\006\006\015\011\010\012\021\013\003\014\013\017" +
    "\017\020\024\021\005\023\023\001\001\000\004\022\036" +
    "\001\001\000\002\001\001\000\032\003\076\004\030\005" +
    "\006\006\015\011\010\012\021\013\003\014\013\017\017" +
    "\020\024\021\005\023\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\067\001\001\000\006\016\061" +
    "\022\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\105\005\006\006\015\011\010\012\021\013\003" +
    "\014\013\017\017\020\024\021\005\023\023\001\001\000" +
    "\004\022\036\001\001\000\010\007\112\010\110\021\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\116\004\030\005\006\006\015\011\010\012" +
    "\021\013\003\014\013\017\017\020\024\021\005\023\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\122\021\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\125\004\030\005\006\006" +
    "\015\011\010\012\021\013\003\014\013\017\017\020\024" +
    "\021\005\023\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\067\001\001\000\032" +
    "\003\132\004\030\005\006\006\015\011\010\012\021\013" +
    "\003\014\013\017\017\020\024\021\005\023\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\136\004\030\005\006\006\015\011\010\012\021" +
    "\013\003\014\013\017\017\020\024\021\005\023\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\004\052\005\006\006\015\011\010\012\021\013" +
    "\003\014\013\015\142\017\017\020\024\021\005\023\023" +
    "\001\001\000\004\016\067\001\001\000\002\001\001\000" +
    "\032\003\145\004\030\005\006\006\015\011\010\012\021" +
    "\013\003\014\013\017\017\020\024\021\005\023\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\036" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
    symAtual = getScanner().next_token();

    log.add("Log("+log.size()
            +"): Token = "+ Sym.terminalNames[symAtual.sym]
            +" - Left = "+ symAtual.left
            +" - Right = "+ symAtual.right
            +" - Parse State"+ symAtual.parse_state
    );

    return getScanner().next_token();

    }



    public int linha;
    public int coluna;
    public String texto;
    public String token;
    private List<String> erros = new ArrayList<String>();
    private List<String> log = new ArrayList<String>();
    java_cup.runtime.Symbol symAtual;

    public List<String> getErros(){
        return erros;
    }

    public List<String> getLog(){
        return log;
    }

    @Override
    public void report_error(String message, Object info){
        erros.add("Erro("+erros.size()+") Warning - " + message + " - Token - " + Sym.terminalNames[((Symbol) info).sym]);
    }

    @Override
    public void report_fatal_error(String message, Object info)  {
        erros.add("Erro("+erros.size()+") Error - " + message + " - Token - " + Sym.terminalNames[((Symbol) info).sym]);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= expressoes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expressoes ::= expressao PVIRGULA expressoes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressoes",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expressoes ::= expressao PVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressoes",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expressao ::= L_PARENTESIS expressao R_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expressao ::= decl_variavel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expressao ::= chamar_funcao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expressao ::= decl_funcao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expressao ::= decl_atribuicoes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expressao ::= decl_condicional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expressao ::= expressao_mat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expressao ::= decl_repeticao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expressao ::= data_tipo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // chamar_funcao ::= FUNCAO L_PARENTESIS funcao_parametros R_PARENTESIS L_CHAVE expressoes R_CHAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamar_funcao",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decl_funcao ::= FUNCAO L_PARENTESIS decl_funcao_parametros R_PARENTESIS L_CHAVE expressoes R_CHAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_funcao",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // decl_repeticao ::= FOR L_PARENTESIS decl_variavel PVIRGULA expressao_booleana PVIRGULA expressao R_PARENTESIS L_CHAVE expressoes R_CHAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_repeticao",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // decl_repeticao ::= WHILE L_PARENTESIS expressao_booleana R_PARENTESIS L_CHAVE expressoes R_CHAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_repeticao",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcao_parametros ::= funcao_parametros FUNCAO_PARAMETRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcao_parametros",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcao_parametros ::= FUNCAO_PARAMETRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcao_parametros",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // decl_funcao_parametros ::= data_tipo DECL_FUNCAO_PARAMETRO PVIRGULA decl_funcao_parametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_funcao_parametros",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // decl_funcao_parametros ::= data_tipo DECL_FUNCAO_PARAMETRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_funcao_parametros",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // decl_condicional ::= decl_condicional condicional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_condicional",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // decl_condicional ::= condicional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_condicional",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // condicional ::= IF expressao_booleana L_CHAVE expressoes R_CHAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // condicional ::= IF expressao_booleana L_CHAVE expressoes R_CHAVE ELSE L_CHAVE expressoes R_CHAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // decl_atribuicoes ::= decl_atribuicoes decl_atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_atribuicoes",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // decl_atribuicoes ::= decl_atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_atribuicoes",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // decl_atribuicao ::= VARIAVEL ATRIBUICAO expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_atribuicao",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expressao_booleana ::= expressao_booleana op_booleano expressao_booleana 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_booleana",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expressao_booleana ::= L_PARENTESIS expressao_booleana R_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_booleana",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expressao_booleana ::= expressao op_booleano expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_booleana",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // op_booleano ::= OU 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_booleano",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // op_booleano ::= E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_booleano",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // op_booleano ::= IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_booleano",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // op_booleano ::= NAO_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_booleano",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // op_booleano ::= MENOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_booleano",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // op_booleano ::= MAIOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_booleano",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // op_booleano ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_booleano",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // op_booleano ::= MAIOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_booleano",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // op_booleano ::= NAO expressao_booleana 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_booleano",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // op_booleano ::= NAO op_booleano 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_booleano",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expressao_mat ::= expressao op_mat expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_mat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // op_mat ::= OPERADOR_SOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_mat",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // op_mat ::= OPERADOR_SUB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_mat",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // op_mat ::= OPERADOR_PROD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_mat",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // op_mat ::= OPERADOR_DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_mat",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // op_mat ::= EXPOENTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_mat",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // decl_variavel ::= VARIAVEL data_tipo PVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_variavel",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // data_tipo ::= NUMEROS_NATURAIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_tipo",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // data_tipo ::= TEXTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_tipo",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // data_tipo ::= NUMEROS_REAIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_tipo",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
