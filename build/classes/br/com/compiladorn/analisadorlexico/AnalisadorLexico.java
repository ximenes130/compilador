/* The following code was generated by JFlex 1.6.1 */


/* Definiçao da linguagem N - Uma linguagem de progamaçao escrita com numeros*/


package br.com.compiladorn.analisadorlexico;
import static br.com.compiladorn.analisadorlexico.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/ximenes/Dev/compiladores/compilador/src/br/com/compiladorn/analisadorlexico/gramatica.lex</tt>
 */
public class AnalisadorLexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\32\1\2\1\33\1\33\1\1\22\0\1\32\3\0\1\47"+
    "\1\0\1\23\3\0\1\0\1\0\1\20\2\0\1\0\1\12\1\13"+
    "\1\11\1\14\1\21\1\24\1\25\1\16\2\17\1\0\1\30\1\0"+
    "\1\31\3\0\1\7\7\0\1\4\2\0\1\10\1\0\1\5\5\0"+
    "\1\6\4\0\1\3\13\0\1\41\1\34\1\0\1\40\1\35\2\0"+
    "\1\46\1\36\1\42\1\43\2\0\1\44\1\0\1\37\2\0\1\45"+
    "\3\0\1\26\1\22\1\27\7\0\1\33\32\0\1\32\u05bf\0\12\15"+
    "\206\0\12\15\306\0\12\15\u019c\0\12\15\166\0\12\15\166\0\12\15"+
    "\166\0\12\15\166\0\12\15\166\0\12\15\166\0\12\15\166\0\12\15"+
    "\166\0\12\15\166\0\12\15\140\0\12\15\166\0\12\15\106\0\12\15"+
    "\u0116\0\12\15\106\0\12\15\u05e6\0\1\32\u015f\0\12\15\46\0\12\15"+
    "\u012c\0\12\15\200\0\12\15\246\0\12\15\6\0\12\15\266\0\12\15"+
    "\126\0\12\15\206\0\12\15\6\0\12\15\u03a6\0\13\32\35\0\1\33"+
    "\1\33\5\0\1\32\57\0\1\32\u0fa0\0\1\32\u761f\0\12\15\u02a6\0"+
    "\12\15\46\0\12\15\306\0\12\15\26\0\12\15\126\0\12\15\u0196\0"+
    "\12\15\u5316\0\12\15\u0586\0\12\15\u0bbc\0\12\15\200\0\12\15\74\0"+
    "\12\15\220\0\12\15\u0116\0\12\15\u01d6\0\12\15\u0176\0\12\15\146\0"+
    "\12\15\u0216\0\12\15\u5176\0\12\15\346\0\12\15\u6c74\0\62\15\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u280f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\4\1\1\3\1\4\1\5\1\6"+
    "\4\1\1\7\1\10\6\0\1\11\1\12\2\0\1\13"+
    "\2\0\1\14\1\15\2\16\1\17\1\0\1\20\1\0"+
    "\1\21\1\22\5\0\1\23\1\0\1\24\1\0\1\25"+
    "\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[54];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\50\0\50\0\50\0\50\0\u0140\0\u0168\0\u0190\0\u01b8"+
    "\0\u01e0\0\170\0\u0208\0\u0230\0\u0258\0\u0280\0\u02a8\0\u02d0"+
    "\0\50\0\50\0\u02f8\0\u0320\0\50\0\u0348\0\u0370\0\50"+
    "\0\50\0\u0398\0\u03c0\0\u0258\0\u03e8\0\u03e8\0\u0410\0\50"+
    "\0\50\0\u0438\0\u0460\0\u0488\0\u04b0\0\u04d8\0\50\0\u0500"+
    "\0\u0488\0\u0528\0\50\0\u0550\0\u0578\0\u05a0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[54];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\15\2\1\6\1\7\1\10"+
    "\2\2\1\11\1\12\1\13\1\14\2\4\1\15\1\16"+
    "\1\2\1\17\5\2\1\20\1\2\1\21\52\0\1\22"+
    "\6\0\1\23\1\24\1\25\2\0\1\26\2\0\1\27"+
    "\37\0\1\23\1\24\1\25\2\0\1\26\2\0\1\27"+
    "\31\0\1\30\55\0\1\31\1\0\2\31\4\0\1\31"+
    "\2\0\1\31\1\32\44\0\1\32\50\0\1\32\61\0"+
    "\1\33\5\0\1\34\40\0\1\35\53\0\1\36\47\0"+
    "\1\37\7\0\1\21\2\0\30\21\1\0\14\21\11\0"+
    "\4\40\4\0\1\41\37\0\4\42\1\43\2\42\1\0"+
    "\1\42\2\0\2\42\33\0\7\44\1\0\1\44\2\0"+
    "\2\44\33\0\5\45\1\46\1\45\1\0\1\45\2\0"+
    "\2\45\34\0\1\31\41\0\1\47\101\0\1\50\55\0"+
    "\1\51\44\0\1\52\43\0\1\53\23\0\4\42\1\43"+
    "\2\42\1\54\1\42\2\0\2\42\33\0\7\43\1\0"+
    "\1\43\2\0\2\43\33\0\7\55\1\0\1\55\2\0"+
    "\2\55\27\0\1\56\104\0\1\57\53\0\1\60\12\0"+
    "\4\61\1\0\2\61\1\0\1\61\2\0\2\61\33\0"+
    "\7\26\1\0\1\26\2\0\2\26\26\0\1\62\104\0"+
    "\1\63\14\0\1\64\45\0\1\65\52\0\1\66\50\0"+
    "\1\22\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1480];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\4\11\6\1\6\0\2\11\2\0"+
    "\1\11\2\0\2\11\3\1\1\0\1\1\1\0\2\11"+
    "\5\0\1\11\1\0\1\1\1\0\1\11\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[54];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public Token yytoken;

    public LexemaPOJO getLexema(){
      LexemaPOJO lexema = new LexemaPOJO();
      
      lexema.setToken(this.yytoken);
      lexema.setText(this.yytext());
      lexema.setLinha(this.yyline);
      lexema.setColuna(this.yycolumn);
      
      return lexema;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalisadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 390) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public LexemaPOJO next() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yytoken = ERROR;               return getLexema();
            }
          case 22: break;
          case 2: 
            { yytoken = BRANCO;              return getLexema();
            }
          case 23: break;
          case 3: 
            { yytoken = INICIO_BLOCO;        return getLexema();
            }
          case 24: break;
          case 4: 
            { yytoken = FIM_BLOCO;           return getLexema();
            }
          case 25: break;
          case 5: 
            { yytoken = FIM_LINHA;           return getLexema();
            }
          case 26: break;
          case 6: 
            { yytoken = ATRIBUICAO;          return getLexema();
            }
          case 27: break;
          case 7: 
            { yytoken = COMENTARIO;          return getLexema();
            }
          case 28: break;
          case 8: 
            { yytoken = LINHA;               return getLexema();
            }
          case 29: break;
          case 9: 
            { yytoken = OPERADOR_RELACIONAL; return getLexema();
            }
          case 30: break;
          case 10: 
            { yytoken = OPERADOR_LOGICO;     return getLexema();
            }
          case 31: break;
          case 11: 
            { yytoken = IF;                  return getLexema();
            }
          case 32: break;
          case 12: 
            { yytoken = OPERADOR_ARITMETICO; return getLexema();
            }
          case 33: break;
          case 13: 
            { yytoken = EXPOENTE;            return getLexema();
            }
          case 34: break;
          case 14: 
            { yytoken = NUMEROS_NATURAIS;    return getLexema();
            }
          case 35: break;
          case 15: 
            { yytoken = ID;                  return getLexema();
            }
          case 36: break;
          case 16: 
            { yytoken = TEXTO;               return getLexema();
            }
          case 37: break;
          case 17: 
            { yytoken = FIM_COMANDO;         return getLexema();
            }
          case 38: break;
          case 18: 
            { yytoken = FOR;                 return getLexema();
            }
          case 39: break;
          case 19: 
            { yytoken = THEN;                return getLexema();
            }
          case 40: break;
          case 20: 
            { yytoken = NUMEROS_REIAS;       return getLexema();
            }
          case 41: break;
          case 21: 
            { yytoken = WHILE;               return getLexema();
            }
          case 42: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
