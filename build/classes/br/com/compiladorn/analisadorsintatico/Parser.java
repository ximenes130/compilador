
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package br.com.compiladorn.analisadorsintatico;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\003\004\000\002\004\005\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\005\011\000\002\006\011\000\002\023" +
    "\015\000\002\023\011\000\002\007\005\000\002\007\003" +
    "\000\002\007\003\000\002\010\006\000\002\010\004\000" +
    "\002\010\003\000\002\011\004\000\002\011\003\000\002" +
    "\012\007\000\002\012\013\000\002\013\004\000\002\013" +
    "\003\000\002\014\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\017" +
    "\004\000\002\017\005\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\020\005\000\002\021\003\000\002\021\003\000\002" +
    "\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\004\004\005\001\002\000\004\002\157\001" +
    "\002\000\024\006\027\007\020\010\024\011\030\013\007" +
    "\020\014\021\031\022\012\034\022\001\002\000\064\006" +
    "\156\007\ufff9\010\ufff9\011\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\020\ufff9\021\ufff9\022\ufff9\024\ufff9\027\ufff9\030\ufff9\031" +
    "\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9" +
    "\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\001\002\000" +
    "\024\006\027\007\020\010\024\011\030\013\007\020\014" +
    "\021\031\022\012\034\022\001\002\000\064\006\ufff5\007" +
    "\ufff5\010\ufff5\011\ufff5\013\ufff5\014\ufff5\015\ufff5\020\ufff5" +
    "\021\ufff5\022\ufff5\024\ufff5\027\ufff5\030\ufff5\031\ufff5\032" +
    "\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5" +
    "\041\ufff5\042\ufff5\043\ufff5\044\ufff5\001\002\000\064\006" +
    "\ufffb\007\ufffb\010\ufffb\011\ufffb\013\ufffb\014\ufffb\015\ufffb" +
    "\020\ufffb\021\ufffb\022\ufffb\024\ufffb\027\ufffb\030\ufffb\031" +
    "\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb" +
    "\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\001\002\000" +
    "\004\013\146\001\002\000\064\006\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\013\ufff8\014\ufff8\015\ufff8\020\014\021\ufff8\022" +
    "\ufff8\024\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8" +
    "\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042" +
    "\ufff8\043\ufff8\044\ufff8\001\002\000\024\006\027\007\020" +
    "\010\024\011\030\013\051\020\014\021\031\022\012\034" +
    "\022\001\002\000\026\005\134\006\027\007\020\010\024" +
    "\011\030\013\007\020\014\021\031\022\012\034\022\001" +
    "\002\000\064\006\uffe5\007\uffe5\010\uffe5\011\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\020\uffe5\021\uffe5\022\uffe5\024\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044" +
    "\uffe5\001\002\000\064\006\ufffa\007\ufffa\010\ufffa\011\ufffa" +
    "\013\ufffa\014\ufffa\015\ufffa\020\ufffa\021\ufffa\022\ufffa\024" +
    "\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa" +
    "\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043" +
    "\ufffa\044\ufffa\001\002\000\066\006\uffd0\007\uffd0\010\uffd0" +
    "\011\uffd0\013\uffd0\014\uffd0\015\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\024\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0" +
    "\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\042\uffd0\043\uffd0\044\uffd0\001\002\000\064\006\027" +
    "\007\020\010\024\011\030\013\007\014\ufff7\015\ufff7\020" +
    "\014\021\031\022\012\024\ufff7\027\ufff7\030\ufff7\031\ufff7" +
    "\032\ufff7\033\ufff7\034\022\035\ufff7\036\ufff7\037\ufff7\040" +
    "\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\001\002\000\004" +
    "\013\106\001\002\000\064\006\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\024\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\001\002\000\066\006\uffcf\007\uffcf\010" +
    "\uffcf\011\uffcf\013\uffcf\014\uffcf\015\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\024\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\044\uffcf\001\002\000\064\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\013\ufff6\014\ufff6\015\ufff6" +
    "\020\ufff6\021\ufff6\022\ufff6\024\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6" +
    "\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\001\002\000" +
    "\064\006\ufffc\007\ufffc\010\ufffc\011\ufffc\013\ufffc\014\ufffc" +
    "\015\ufffc\020\ufffc\021\ufffc\022\ufffc\024\ufffc\027\ufffc\030" +
    "\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc" +
    "\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\001" +
    "\002\000\012\007\020\010\024\011\030\017\104\001\002" +
    "\000\066\006\uffce\007\uffce\010\uffce\011\uffce\013\uffce\014" +
    "\uffce\015\uffce\020\uffce\021\uffce\022\uffce\024\uffce\026\uffce" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce" +
    "\044\uffce\001\002\000\004\013\043\001\002\000\016\024" +
    "\041\027\035\030\037\031\036\032\033\033\034\001\002" +
    "\000\024\006\uffd5\007\uffd5\010\uffd5\011\uffd5\013\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\034\uffd5\001\002\000\030\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\011\ufffe\013\ufffe\016\ufffe\020" +
    "\ufffe\021\ufffe\022\ufffe\034\ufffe\001\002\000\024\006\uffd4" +
    "\007\uffd4\010\uffd4\011\uffd4\013\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\034\uffd4\001\002\000\024\006\uffd6\007\uffd6\010\uffd6" +
    "\011\uffd6\013\uffd6\020\uffd6\021\uffd6\022\uffd6\034\uffd6\001" +
    "\002\000\024\006\uffd3\007\uffd3\010\uffd3\011\uffd3\013\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\034\uffd3\001\002\000\024\006" +
    "\027\007\020\010\024\011\030\013\007\020\014\021\031" +
    "\022\012\034\022\001\002\000\024\006\uffd2\007\uffd2\010" +
    "\uffd2\011\uffd2\013\uffd2\020\uffd2\021\uffd2\022\uffd2\034\uffd2" +
    "\001\002\000\064\006\uffd7\007\uffd7\010\uffd7\011\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\020\uffd7\021\uffd7\022\uffd7\024\041" +
    "\027\035\030\037\031\036\032\033\033\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7" +
    "\044\uffd7\001\002\000\004\006\045\001\002\000\004\033" +
    "\050\001\002\000\010\007\020\010\024\011\030\001\002" +
    "\000\004\033\047\001\002\000\064\006\uffd1\007\uffd1\010" +
    "\uffd1\011\uffd1\013\uffd1\014\uffd1\015\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\024\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\044\uffd1\001\002\000\024\006\027\007" +
    "\020\010\024\011\030\013\051\020\014\021\031\022\012" +
    "\034\022\001\002\000\024\006\027\007\020\010\024\011" +
    "\030\013\051\020\014\021\031\022\012\034\022\001\002" +
    "\000\034\024\041\027\035\030\037\031\036\032\033\035" +
    "\061\036\065\037\060\040\062\041\055\042\054\043\064" +
    "\044\057\001\002\000\024\033\056\035\061\036\065\037" +
    "\060\040\062\041\055\042\054\043\064\044\057\001\002" +
    "\000\024\006\uffdb\007\uffdb\010\uffdb\011\uffdb\013\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\034\uffdb\001\002\000\024\006\uffdc" +
    "\007\uffdc\010\uffdc\011\uffdc\013\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\034\uffdc\001\002\000\024\006\027\007\020\010\024" +
    "\011\030\013\007\020\014\021\031\022\012\034\022\001" +
    "\002\000\024\006\uffd9\007\uffd9\010\uffd9\011\uffd9\013\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\034\uffd9\001\002\000\024\006" +
    "\uffde\007\uffde\010\uffde\011\uffde\013\uffde\020\uffde\021\uffde" +
    "\022\uffde\034\uffde\001\002\000\024\006\uffe0\007\uffe0\010" +
    "\uffe0\011\uffe0\013\uffe0\020\uffe0\021\uffe0\022\uffe0\034\uffe0" +
    "\001\002\000\024\006\uffdd\007\uffdd\010\uffdd\011\uffdd\013" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\034\uffdd\001\002\000\024" +
    "\006\027\007\020\010\024\011\030\013\051\020\014\021" +
    "\031\022\012\034\022\001\002\000\024\006\uffda\007\uffda" +
    "\010\uffda\011\uffda\013\uffda\020\uffda\021\uffda\022\uffda\034" +
    "\uffda\001\002\000\024\006\uffdf\007\uffdf\010\uffdf\011\uffdf" +
    "\013\uffdf\020\uffdf\021\uffdf\022\uffdf\034\uffdf\001\002\000" +
    "\030\014\uffe3\015\uffe3\033\uffe3\035\061\036\065\037\060" +
    "\040\062\041\055\042\054\043\064\044\057\001\002\000" +
    "\016\014\070\024\041\027\035\030\037\031\036\032\033" +
    "\001\002\000\004\015\071\001\002\000\024\006\027\007" +
    "\020\010\024\011\030\013\007\020\014\021\031\022\012" +
    "\034\022\001\002\000\026\006\027\007\020\010\024\011" +
    "\030\013\007\016\073\020\014\021\031\022\012\034\022" +
    "\001\002\000\064\006\ufff2\007\ufff2\010\ufff2\011\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\020\ufff2\021\ufff2\022\ufff2\024\ufff2" +
    "\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035" +
    "\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2" +
    "\044\ufff2\001\002\000\016\024\041\027\035\030\037\031" +
    "\036\032\033\033\075\001\002\000\030\005\uffff\006\uffff" +
    "\007\uffff\010\uffff\011\uffff\013\uffff\016\uffff\020\uffff\021" +
    "\uffff\022\uffff\034\uffff\001\002\000\024\006\027\007\020" +
    "\010\024\011\030\013\007\020\014\021\031\022\012\034" +
    "\022\001\002\000\042\014\uffe1\015\uffe1\024\041\027\035" +
    "\030\037\031\036\032\033\033\uffe1\035\uffe1\036\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\001\002" +
    "\000\024\014\103\035\061\036\065\037\060\040\062\041" +
    "\055\042\054\043\064\044\057\001\002\000\036\014\102" +
    "\024\041\027\035\030\037\031\036\032\033\035\061\036" +
    "\065\037\060\040\062\041\055\042\054\043\064\044\057" +
    "\001\002\000\064\006\ufffd\007\ufffd\010\ufffd\011\ufffd\013" +
    "\ufffd\014\ufffd\015\ufffd\020\ufffd\021\ufffd\022\ufffd\024\ufffd" +
    "\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035" +
    "\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd" +
    "\044\ufffd\001\002\000\030\014\uffe2\015\uffe2\033\uffe2\035" +
    "\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2" +
    "\044\uffe2\001\002\000\024\006\027\007\020\010\024\011" +
    "\030\013\007\020\014\021\031\022\012\034\022\001\002" +
    "\000\064\006\uffe4\007\uffe4\010\uffe4\011\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\020\uffe4\021\uffe4\022\uffe4\024\041\027\035" +
    "\030\037\031\036\032\033\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4" +
    "\001\002\000\014\007\020\010\024\011\030\023\111\025" +
    "\107\001\002\000\006\014\uffef\023\uffef\001\002\000\004" +
    "\014\126\001\002\000\006\014\uffee\023\uffee\001\002\000" +
    "\004\026\122\001\002\000\006\014\115\023\114\001\002" +
    "\000\004\025\121\001\002\000\004\015\116\001\002\000" +
    "\024\006\027\007\020\010\024\011\030\013\007\020\014" +
    "\021\031\022\012\034\022\001\002\000\026\006\027\007" +
    "\020\010\024\011\030\013\007\016\120\020\014\021\031" +
    "\022\012\034\022\001\002\000\064\006\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\013\ufff4\014\ufff4\015\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\024\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033" +
    "\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4" +
    "\042\ufff4\043\ufff4\044\ufff4\001\002\000\006\014\ufff0\023" +
    "\ufff0\001\002\000\006\014\uffec\033\123\001\002\000\012" +
    "\007\020\010\024\011\030\023\125\001\002\000\004\014" +
    "\uffed\001\002\000\004\014\uffeb\001\002\000\004\015\127" +
    "\001\002\000\024\006\027\007\020\010\024\011\030\013" +
    "\007\020\014\021\031\022\012\034\022\001\002\000\026" +
    "\006\027\007\020\010\024\011\030\013\007\016\131\020" +
    "\014\021\031\022\012\034\022\001\002\000\064\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\013\ufff3\014\ufff3\015\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\024\ufff3\027\ufff3\030\ufff3\031\ufff3" +
    "\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040" +
    "\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\001\002\000\064" +
    "\006\027\007\020\010\024\011\030\013\007\014\uffd8\015" +
    "\uffd8\020\014\021\031\022\012\024\ufff7\027\ufff7\030\ufff7" +
    "\031\ufff7\032\ufff7\033\uffd8\034\022\035\uffd8\036\uffd8\037" +
    "\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\001\002" +
    "\000\014\024\041\027\035\030\037\031\036\032\033\001" +
    "\002\000\004\002\000\001\002\000\024\015\136\035\061" +
    "\036\065\037\060\040\062\041\055\042\054\043\064\044" +
    "\057\001\002\000\024\006\027\007\020\010\024\011\030" +
    "\013\007\020\014\021\031\022\012\034\022\001\002\000" +
    "\026\006\027\007\020\010\024\011\030\013\007\016\140" +
    "\020\014\021\031\022\012\034\022\001\002\000\066\006" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\012\141\013\uffe8\014\uffe8" +
    "\015\uffe8\020\uffe8\021\uffe8\022\uffe8\024\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\001" +
    "\002\000\004\015\142\001\002\000\024\006\027\007\020" +
    "\010\024\011\030\013\007\020\014\021\031\022\012\034" +
    "\022\001\002\000\026\006\027\007\020\010\024\011\030" +
    "\013\007\016\144\020\014\021\031\022\012\034\022\001" +
    "\002\000\064\006\uffe7\007\uffe7\010\uffe7\011\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\020\uffe7\021\uffe7\022\uffe7\024\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044" +
    "\uffe7\001\002\000\064\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\013\uffea\014\uffea\015\uffea\020\uffea\021\uffea\022\uffea\024" +
    "\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea" +
    "\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043" +
    "\uffea\044\uffea\001\002\000\024\006\027\007\020\010\024" +
    "\011\030\013\051\020\014\021\031\022\012\034\022\001" +
    "\002\000\024\014\150\035\061\036\065\037\060\040\062" +
    "\041\055\042\054\043\064\044\057\001\002\000\004\015" +
    "\151\001\002\000\024\006\027\007\020\010\024\011\030" +
    "\013\007\020\014\021\031\022\012\034\022\001\002\000" +
    "\026\006\027\007\020\010\024\011\030\013\007\016\153" +
    "\020\014\021\031\022\012\034\022\001\002\000\064\006" +
    "\ufff1\007\ufff1\010\ufff1\011\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\024\ufff1\027\ufff1\030\ufff1\031" +
    "\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\001\002\000" +
    "\016\014\102\024\041\027\035\030\037\031\036\032\033" +
    "\001\002\000\064\006\uffe6\007\uffe6\010\uffe6\011\uffe6\013" +
    "\uffe6\014\uffe6\015\uffe6\020\uffe6\021\uffe6\022\uffe6\024\uffe6" +
    "\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6" +
    "\044\uffe6\001\002\000\004\017\104\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\004\002\003\001\001\000\002\001\001\000" +
    "\032\003\014\004\031\005\010\006\016\011\012\012\022" +
    "\013\005\014\015\017\020\020\025\021\007\023\024\001" +
    "\001\000\004\014\154\001\001\000\030\004\153\005\010" +
    "\006\016\011\012\012\022\013\005\014\015\017\020\020" +
    "\025\021\007\023\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\144\001\001\000" +
    "\032\004\051\005\010\006\016\011\012\012\022\013\005" +
    "\014\015\015\134\017\020\020\025\021\007\023\024\001" +
    "\001\000\030\004\073\005\010\006\016\011\012\012\022" +
    "\013\005\014\015\017\020\020\025\021\007\023\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\004\132\005\010\006\016\011\012\012\022\013" +
    "\005\014\015\017\131\020\025\021\007\023\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\041\005" +
    "\010\006\016\011\012\012\022\013\005\014\015\017\020" +
    "\020\025\021\007\023\024\001\001\000\002\001\001\000" +
    "\004\022\037\001\001\000\004\020\043\001\001\000\002" +
    "\001\001\000\004\021\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\004\051\005\010\006\016\011\012" +
    "\012\022\013\005\014\015\015\052\017\020\020\025\021" +
    "\007\023\024\001\001\000\032\004\100\005\010\006\016" +
    "\011\012\012\022\013\005\014\015\015\077\017\020\020" +
    "\025\021\007\023\024\001\001\000\006\016\075\022\037" +
    "\001\001\000\004\016\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\004\066\005\010\006\016\011\012" +
    "\012\022\013\005\014\015\017\020\020\025\021\007\023" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\004\051\005\010\006" +
    "\016\011\012\012\022\013\005\014\015\015\065\017\020" +
    "\020\025\021\007\023\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\062\001\001\000\004\022\037" +
    "\001\001\000\002\001\001\000\032\003\071\004\031\005" +
    "\010\006\016\011\012\012\022\013\005\014\015\017\020" +
    "\020\025\021\007\023\024\001\001\000\030\004\073\005" +
    "\010\006\016\011\012\012\022\013\005\014\015\017\020" +
    "\020\025\021\007\023\024\001\001\000\002\001\001\000" +
    "\004\022\037\001\001\000\002\001\001\000\030\004\076" +
    "\005\010\006\016\011\012\012\022\013\005\014\015\017" +
    "\020\020\025\021\007\023\024\001\001\000\004\022\037" +
    "\001\001\000\004\016\062\001\001\000\006\016\075\022" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\104\005\010\006\016\011\012\012\022\013\005\014" +
    "\015\017\020\020\025\021\007\023\024\001\001\000\004" +
    "\022\037\001\001\000\010\007\112\010\107\021\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\116\004\031\005\010\006\016" +
    "\011\012\012\022\013\005\014\015\017\020\020\025\021" +
    "\007\023\024\001\001\000\030\004\073\005\010\006\016" +
    "\011\012\012\022\013\005\014\015\017\020\020\025\021" +
    "\007\023\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\123\021\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\127\004\031\005\010\006\016\011\012\012\022\013" +
    "\005\014\015\017\020\020\025\021\007\023\024\001\001" +
    "\000\030\004\073\005\010\006\016\011\012\012\022\013" +
    "\005\014\015\017\020\020\025\021\007\023\024\001\001" +
    "\000\002\001\001\000\030\004\132\005\010\006\016\011" +
    "\012\012\022\013\005\014\015\017\131\020\025\021\007" +
    "\023\024\001\001\000\004\022\037\001\001\000\002\001" +
    "\001\000\004\016\062\001\001\000\032\003\136\004\031" +
    "\005\010\006\016\011\012\012\022\013\005\014\015\017" +
    "\020\020\025\021\007\023\024\001\001\000\030\004\073" +
    "\005\010\006\016\011\012\012\022\013\005\014\015\017" +
    "\020\020\025\021\007\023\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\142\004\031\005\010\006" +
    "\016\011\012\012\022\013\005\014\015\017\020\020\025" +
    "\021\007\023\024\001\001\000\030\004\073\005\010\006" +
    "\016\011\012\012\022\013\005\014\015\017\020\020\025" +
    "\021\007\023\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\004\051\005\010\006\016\011\012\012\022" +
    "\013\005\014\015\015\146\017\020\020\025\021\007\023" +
    "\024\001\001\000\004\016\062\001\001\000\002\001\001" +
    "\000\032\003\151\004\031\005\010\006\016\011\012\012" +
    "\022\013\005\014\015\017\020\020\025\021\007\023\024" +
    "\001\001\000\030\004\073\005\010\006\016\011\012\012" +
    "\022\013\005\014\015\017\020\020\025\021\007\023\024" +
    "\001\001\000\002\001\001\000\004\022\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    linha = 0;
    coluna = 0;
    texto = "";
    token = "";
 
    }



    public int linha;
    public int coluna;
    public String texto;
    public String token;

    @Override
    public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message + " - " + ((Symbol) info).toString());
    }

    @Override
    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message + " - " + info.toString());
        System.exit(-1);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= PROGRAM_BEGIN expressoes PROGRAM_END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expressoes ::= expressoes expressao PVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressoes",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expressoes ::= expressao PVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressoes",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expressao ::= L_PARENTESIS expressao R_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expressao ::= decl_variavel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expressao ::= chamar_funcao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expressao ::= decl_funcao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expressao ::= decl_atribuicoes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expressao ::= decl_condicional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expressao ::= expressao_mat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expressao ::= decl_repeticao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expressao ::= data_tipo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // chamar_funcao ::= FUNCAO L_PARENTESIS funcao_parametros R_PARENTESIS L_CHAVE expressoes R_CHAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamar_funcao",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decl_funcao ::= FUNCAO L_PARENTESIS decl_funcao_parametros R_PARENTESIS L_CHAVE expressoes R_CHAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_funcao",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // decl_repeticao ::= FOR L_PARENTESIS decl_variavel PVIRGULA expressao_booleana PVIRGULA expressao R_PARENTESIS L_CHAVE expressoes R_CHAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_repeticao",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // decl_repeticao ::= WHILE L_PARENTESIS expressao_booleana R_PARENTESIS L_CHAVE expressoes R_CHAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_repeticao",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcao_parametros ::= funcao_parametros BRANCO FUNCAO_PARAMETRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcao_parametros",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcao_parametros ::= FUNCAO_PARAMETRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcao_parametros",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funcao_parametros ::= BRANCO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcao_parametros",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // decl_funcao_parametros ::= data_tipo DECL_FUNCAO_PARAMETRO PVIRGULA decl_funcao_parametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_funcao_parametros",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // decl_funcao_parametros ::= data_tipo DECL_FUNCAO_PARAMETRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_funcao_parametros",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // decl_funcao_parametros ::= BRANCO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_funcao_parametros",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // decl_condicional ::= decl_condicional condicional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_condicional",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // decl_condicional ::= condicional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_condicional",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // condicional ::= IF expressao_booleana L_CHAVE expressoes R_CHAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condicional ::= IF expressao_booleana L_CHAVE expressoes R_CHAVE ELSE L_CHAVE expressoes R_CHAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // decl_atribuicoes ::= decl_atribuicoes decl_atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_atribuicoes",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // decl_atribuicoes ::= decl_atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_atribuicoes",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // decl_atribuicao ::= VARIAVEL ATRIBUICAO expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_atribuicao",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expressao_booleana ::= expressao_booleana op_booleano expressao_booleana 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_booleana",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expressao_booleana ::= L_PARENTESIS expressao_booleana R_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_booleana",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expressao_booleana ::= expressao op_booleano expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_booleana",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // op_booleano ::= OU 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_booleano",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // op_booleano ::= E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_booleano",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // op_booleano ::= IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_booleano",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // op_booleano ::= NAO_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_booleano",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // op_booleano ::= MENOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_booleano",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // op_booleano ::= MAIOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_booleano",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // op_booleano ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_booleano",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // op_booleano ::= MAIOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_booleano",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expressao_mat ::= expressao_mat expressao_mat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_mat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expressao_mat ::= expressao op_mat expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_mat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // op_mat ::= OPERADOR_SOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_mat",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // op_mat ::= OPERADOR_SUB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_mat",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // op_mat ::= OPERADOR_PROD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_mat",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // op_mat ::= OPERADOR_DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_mat",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // op_mat ::= EXPOENTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_mat",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // decl_variavel ::= VARIAVEL data_tipo PVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_variavel",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // data_tipo ::= NUMEROS_NATURAIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_tipo",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // data_tipo ::= TEXTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_tipo",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // data_tipo ::= NUMEROS_REAIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_tipo",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
